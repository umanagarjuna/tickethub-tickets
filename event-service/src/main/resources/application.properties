# Server Configuration
server.port=8081

# Spring Application Configuration
spring.application.name=event-service

# Spanner Configuration
# Replace with your actual GCP Project ID, Spanner Instance ID, and Database ID
# spring.cloud.gcp.project-id=${GCP_PROJECT_ID:your-gcp-project-id}
# spring.cloud.gcp.spanner.instance-id=${SPANNER_INSTANCE_ID:your-spanner-instance}
# spring.cloud.gcp.spanner.database=${SPANNER_DATABASE_ID:tickethub-event-db}
# For local development with credentials file (not recommended for production on GCP)
# spring.cloud.gcp.credentials.location=optional_path_to_your_credentials.json
# On GCP (GKE, App Engine, Cloud Run, etc.), prefer Workload Identity or default service account credentials.
spring.cloud.gcp.spanner.emulator.enabled=true

# These can be arbitrary for the emulator but your app needs to use them consistently
spring.cloud.gcp.project-id=local-tickethub-project
spring.cloud.gcp.spanner.instance-id=local-event-instance
spring.cloud.gcp.spanner.database=local-event-db

# Spanner Read Replica / Stale Read Configuration (Optional, for performance optimization)
# Example: Allow reads up to 10 seconds stale to potentially hit read replicas
# spring.cloud.gcp.spanner.read-staleness=MAX_STALENESS
# spring.cloud.gcp.spanner.staleness.max-staleness=10s
# Consult Spring Cloud GCP Spanner documentation for detailed options.

# Cloud Storage Configuration
# Replace with your actual GCS bucket name for event images
gcp.storage.bucket.name=${GCS_EVENT_IMAGES_BUCKET:tickethub-event-images}

# Logging Configuration
# Spring Cloud GCP auto-configures structured JSON logging when running on GCP.
# You can adjust log levels as needed.
logging.level.com.tickethub.eventservice=INFO
logging.level.org.springframework.web=INFO
logging.level.com.google.cloud.spanner=INFO
# To enable more detailed Spanner logs, change the level above to DEBUG, e.g.:
# logging.level.com.google.cloud.spanner=DEBUG

# Security - OAuth2 Resource Server (JWT Validation)
# Replace with your actual OAuth2/OIDC issuer URI (e.g., from Identity Platform, Auth0, Keycloak)
# Option 1: Keycloak (if realm is 'tickethub-local' running on default port)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI:http://localhost:8080/realms/tickethub-local}

logging.level.com.tickethub.eventservice.config.LoggingFilter=DEBUG
logging.level.org.springframework.security=TRACE
logging.level.org.springframework.security.oauth2=DEBUG
# The jwk-set-uri is often derived automatically from the issuer-uri's .well-known configuration.
# If not, you might need to specify it:
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=

# Actuator Endpoints Configuration
# Expose health, info, and prometheus endpoints
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=always
# For GKE/Kubernetes readiness and liveness probes
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true
# Add group configuration for probes if needed
# management.endpoint.health.group.readiness.include=readinessProbe
# management.endpoint.health.group.liveness.include=livenessProbe, spanner

# Resilience4j Configuration (Example for 'eventServiceRead' instance)
# Circuit Breaker
resilience4j.circuitbreaker.instances.eventServiceRead.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.eventServiceRead.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.eventServiceRead.slidingWindowSize=20
resilience4j.circuitbreaker.instances.eventServiceRead.minimumNumberOfCalls=10
resilience4j.circuitbreaker.instances.eventServiceRead.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.eventServiceRead.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.eventServiceRead.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.eventServiceRead.failureRateThreshold=50
resilience4j.circuitbreaker.instances.eventServiceRead.eventConsumerBufferSize=10
# Retry
resilience4j.retry.instances.eventServiceRead.maxAttempts=3
resilience4j.retry.instances.eventServiceRead.waitDuration=1s
resilience4j.retry.instances.eventServiceRead.retryExceptions=java.io.IOException,com.google.api.gax.rpc.UnavailableException,java.util.concurrent.TimeoutException,org.springframework.dao.DataAccessResourceFailureException
resilience4j.retry.instances.eventServiceRead.ignoreExceptions=com.tickethub.eventservice.exception.NotFoundException 

# Consider separate Resilience4j configurations for write operations if their failure characteristics differ.
# resilience4j.circuitbreaker.instances.eventServiceWrite...
# resilience4j.retry.instances.eventServiceWrite...

# Default Jackson properties (can be overridden)
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.default-property-inclusion=non_null
